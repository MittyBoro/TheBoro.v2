.prose {
  color: var(--tw-prose-body);

  /* --tw-prose-body: #374151;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #111827;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #6b7280;
  --tw-prose-bullets: #d1d5db;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-kbd: #111827;
  --tw-prose-kbd-shadows: 17 24 39;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb; */
  --tw-prose-body: #d1d5db;
  --tw-prose-headings: #fff;
  --tw-prose-lead: #9ca3af;
  --tw-prose-links: #fff;
  --tw-prose-bold: #fff;
  --tw-prose-counters: #9ca3af;
  --tw-prose-bullets: #4b5563;
  --tw-prose-hr: #374151;
  --tw-prose-quotes: #f3f4f6;
  --tw-prose-quote-borders: #374151;
  --tw-prose-captions: #9ca3af;
  --tw-prose-kbd: #fff;
  --tw-prose-kbd-shadows: 255 255 255;
  --tw-prose-code: #fff;
  --tw-prose-pre-code: #d1d5db;
  --tw-prose-pre-bg: rgb(0 0 0 / 50%);
  --tw-prose-th-borders: #4b5563;
  --tw-prose-td-borders: #374151;

  font-size: 1rem;
  line-height: 1.75;
}

.prose :where(p):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where([class~='lead']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.2em;
  margin-bottom: 1.2em;
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
}

.prose :not(h1, h2, h3) :where(a):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
}

.prose :where(strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: var(--tw-prose-bold);
  font-weight: 900;
}

.prose :where(a strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(blockquote strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(thead th strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(ol):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
  list-style-type: decimal;
}

.prose :where(ol[type='A']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type='a']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type='A' s]):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type='a' s]):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type='I']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type='i']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type='I' s]):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type='i' s]):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type='1']):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  list-style-type: decimal;
}

.prose :where(ul):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
  list-style-type: disc;
}

.prose :where(ol > li):not(:where([class~='not-prose'], [class~='not-prose'] *))::marker {
  color: var(--tw-prose-counters);
  font-weight: 400;
}

.prose :where(ul > li):not(:where([class~='not-prose'], [class~='not-prose'] *))::marker {
  color: var(--tw-prose-bullets);
}

.prose :where(dt):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.25em;
  color: var(--tw-prose-headings);
  font-weight: 900;
}

.prose :where(hr):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 3em;
  margin-bottom: 3em;
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
}

.prose :where(blockquote):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-left: 1em;
  color: var(--tw-prose-quotes);
  font-style: italic;
  border-left-color: var(--tw-prose-quote-borders);
  border-left-width: 0.25rem;
  quotes: '\201C' '\201D' '\2018' '\2019';
}

.prose
  :where(blockquote p:first-of-type):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  )::before {
  content: open-quote;
}

.prose
  :where(blockquote p:last-of-type):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  )::after {
  content: close-quote;
}

.prose :where(h1):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
  margin-bottom: 0.8889em;
  color: var(--tw-prose-headings);
  font-weight: 900;
  font-size: 2.25em;
  line-height: 1.111;
}

.prose :where(h1 strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-weight: 900;
}

.prose :where(h2):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 2em;
  margin-bottom: 1em;
  color: var(--tw-prose-headings);
  font-weight: 900;
  font-size: 1.5em;
  line-height: 1.3333;
}

.prose :where(h2 strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-weight: 900;
}

.prose :where(h3):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  color: var(--tw-prose-headings);
  font-weight: 900;
  font-size: 1.25em;
  line-height: 1.6;
}

.prose :where(h3 strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-weight: 900;
}

.prose :where(h4):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  color: var(--tw-prose-headings);
  font-weight: 900;
  line-height: 1.5;
}

.prose :where(h4 strong):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-weight: 700;
}

.prose :where(img):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(picture):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  display: block;
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(kbd):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding: 0.1875em 0.375em;
  color: var(--tw-prose-kbd);
  font-weight: 900;
  font-size: 0.875em;
  font-family: inherit;
  border-radius: 0.3125rem;
  box-shadow:
    0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%),
    0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
}

.prose :where(code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: var(--tw-prose-code);
  font-weight: 900;
  font-size: 0.875em;
}

.prose :where(code):not(:where([class~='not-prose'], [class~='not-prose'] *))::before {
  content: '`';
}

.prose :where(code):not(:where([class~='not-prose'], [class~='not-prose'] *))::after {
  content: '`';
}

.prose :where(a code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(h1 code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(h2 code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-size: 0.875em;
}

.prose :where(h3 code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
  font-size: 0.9em;
}

.prose :where(h4 code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(blockquote code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(thead th code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  color: inherit;
}

.prose :where(pre):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.714em;
  margin-bottom: 1.714em;
  padding: 0.857em 1.143em;
  overflow-x: auto;
  color: var(--tw-prose-pre-code);
  font-weight: 400;
  font-size: 0.875em;
  line-height: 1.714em;
  background-color: var(--tw-prose-pre-bg);
  border-radius: 0.375rem;
}

.prose :where(pre code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding: 0;
  color: inherit;
  font-weight: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
  background-color: transparent;
  border-width: 0;
  border-radius: 0;
}

.prose :where(pre code):not(:where([class~='not-prose'], [class~='not-prose'] *))::before {
  content: none;
}

.prose :where(pre code):not(:where([class~='not-prose'], [class~='not-prose'] *))::after {
  content: none;
}

.prose :where(table):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  width: 100%;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.714;
  text-align: left;
  table-layout: auto;
}

.prose :where(thead):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  border-bottom-color: var(--tw-prose-th-borders);
  border-bottom-width: 1px;
}

.prose :where(thead th):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding-right: 0.571em;
  padding-bottom: 0.571em;
  padding-left: 0.571em;
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
}

.prose :where(tbody tr):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  border-bottom-color: var(--tw-prose-td-borders);
  border-bottom-width: 1px;
}

.prose :where(tbody tr:last-child):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  border-bottom-width: 0;
}

.prose :where(tbody td):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  border-top-color: var(--tw-prose-th-borders);
  border-top-width: 1px;
}

.prose :where(tfoot td):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  vertical-align: top;
}

.prose :where(figure > *):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(figcaption):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0.857em;
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.428;
}

.prose :where(picture > img):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(video):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(li):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

.prose :where(ol > li):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding-left: 0.375em;
}

.prose :where(ul > li):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding-left: 0.375em;
}

.prose :where(.prose > ul > li p):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose
  :where(.prose > ul > li > *:first-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  margin-top: 1.25em;
}

.prose
  :where(.prose > ul > li > *:last-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  margin-bottom: 1.25em;
}

.prose
  :where(.prose > ol > li > *:first-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  margin-top: 1.25em;
}

.prose
  :where(.prose > ol > li > *:last-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  margin-bottom: 1.25em;
}

.prose
  :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose :where(dl):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where(dd):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0.5em;
  padding-left: 1.625em;
}

.prose :where(hr + *):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
}

.prose :where(h2 + *):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
}

.prose :where(h3 + *):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
}

.prose :where(h4 + *):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
}

.prose :where(thead th:first-child):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding-left: 0;
}

.prose :where(thead th:last-child):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding-right: 0;
}

.prose :where(tbody td, tfoot td):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  padding: 0.571em;
}

.prose
  :where(tbody td:first-child, tfoot td:first-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  padding-left: 0;
}

.prose
  :where(tbody td:last-child, tfoot td:last-child):not(
    :where([class~='not-prose'], [class~='not-prose'] *)
  ) {
  padding-right: 0;
}

.prose :where(figure):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(.prose > :first-child):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-top: 0;
}

.prose :where(.prose > :last-child):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  margin-bottom: 0;
}
